@using Todo.Controllers
@using Todo.Data
@using Todo.Data.Entities
@using Todo.Services
@using Todo.Views.TodoItem
@model Todo.Models.TodoLists.TodoListDetailViewmodel

@{
    ViewData["Title"] = $"List: {Model.Title}";
}

@inject ApplicationDbContext dbContext

<h2>@ViewData["Title"]</h2>

<h4>Add New Item</h4>

<div class="col-md-4">
    <section>
        <form id="addNewItemForm">
            <span id="addNewItemError" class="text-danger"></span>

            @Html.HiddenFor(m => m.TodoListId)

            <div class="form-group">
                <label for="Title">Title</label>
                <input name="Title" class="form-control" />
            </div>

            <div class="form-group">
                <label for="Importance">Importance</label>
                @Html.DropDownList("Importance", SelectListConvenience.ImportanceSelectListItems, new { @class = "form-control" })
            </div>

            <div class="form-group">
                <label for="ResponsiblePartyId">Responsible Party</label>
                @Html.DropDownList("ResponsiblePartyId", dbContext.UserSelectListItems(), new { @class = "form-control" })
            </div>

            <div class="form-group">
                <button id="addNewItemButton" type="button" class="btn btn-default">Add</button>
            </div>

        </form>
    </section>
</div>

<div class="col-md-8">

    <input type="checkbox" id="showHideDoneItems">
    <label for="showHideDoneItems">Hide items marked as done</label>
    &nbsp;
    <input type="checkbox" id="sortItemsByRank">
    <label for="sortItemsByRank">Sort items by rank</label>
    <br />

    <ul id="itemList" class="list-group">

        @foreach (var item in Model.Items)
        {
            <partial name="_TodoItemPartial" model="item"/>
        }
        </ul>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            $("#addNewItemButton").click(addNewItem);
            $("#showHideDoneItems").change(showHideDoneItems);
            $("#sortItemsByRank").change(changeSortOrder);

            setResponsiblePartyUsernames();
        });

        function setResponsiblePartyUsernames() {
            // Issue a gravatar profile lookup for each unique responsible party.
            @foreach(var email in Model.Items.Select(i => i.ResponsibleParty.Email).Distinct())
            {
                <text>retrieveResponsiblePartyUsername("@Gravatar.GetHash(email)");</text>
            }
        }

        function retrieveResponsiblePartyUsername(userHash) {
            $.ajax({
                type: "GET",
                url: "https://www.gravatar.com/" + userHash + ".json?s=30",
                dataType: "jsonp",
                success: function (profile) {
                    onUsernameRetrieved(profile);
                },
                error: function (xhr, status) {
                    console.log(xhr.responseText);
                }
            });
        }

        function onUsernameRetrieved(profile) {
            $("span[data-user-hash='" + profile.entry[0].hash + "']").text(profile.entry[0].displayName);
        }

        function addNewItem() {
            $("#addNewItemError").text("");
            $.ajax({
                type: "POST",
                url: "@Url.Action("DirectCreate", "TodoItem")",
                data: $("#addNewItemForm").serialize(),
                dataType: "html",
                success: function (itemHtml) {
                    rerenderListItems(itemHtml);
                },
                error: function (xhr, status) {
                    $("#addNewItemError").text(xhr.responseText);
                }
            });
        }

        function showHideDoneItems() {
            if (this.checked == true) {
                $(".list-group-item-done").hide();
            } else {
                $(".list-group-item-done").show();
            }
        }

        function changeSortOrder() {
            rerenderListItems();
        }

        function rerenderListItems(newItemHtml) {
            if (newItemHtml !== undefined) {
                $("#itemList").append(newItemHtml);
            }

            var items = $("#itemList li").detach();
            if ($("#sortItemsByRank").prop("checked")) {
                items.sort(compareItemsByRank);
            } else {
                items.sort(compareItemsByImportance);
            }
            $("#itemList").append(items);
        }

        function compareItemsByImportance(item1, item2) {
            // Ascending by importance.
            var importance1 = parseInt($(item1).attr("data-importance"));
            var importance2 = parseInt($(item2).attr("data-importance"));
            return importance1 - importance2;
        }

        function compareItemsByRank(item1, item2) {
            // Descending by rank.
            var rank1 = parseInt($(item1).attr("data-rank"));
            var rank2 = parseInt($(item2).attr("data-rank"));
            return rank2 - rank1;
        }
    </script>
}